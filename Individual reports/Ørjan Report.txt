IMT-3601 Game Programming project

Individual report for Ørjan Røkkum Brandtzæg
Member of; Neuton
Game: Frank Darkhawks Maze

On our project i was first put to the task of building a map from a file at first, this was done by for and read from file. I did not have very much experience with reading frome file and the functions around it. I also got a clearer mind of how pointers work from the map being a Tile**. The issues of linkers were also a learning experience to me, how Visual Studio deals with such things, and it being different from other compilers. 
I also had some responsibility for the sprites of the different things, but that was hardly mentionable. saving it in .gif and making sure the sizes were nice and comformed. 
the next thing I worked with was the pathfinding of the artificial intelligence of the non player character, I had some basic grasp of how to deal with it, but when I started doing it I realized there was more to it than the basic theory. Firstly building a tree and making a list over visited nodes meant that I could not just add another variable to the map seeing that it would horribly mess up in case of multithreading, and I would have to unmark them. after that I focused on building the tree from the nodes I had made, making recursive functions for traversing and building the tree. I also built a queue in the player object, that could take the moves one by one, I thought of a list of int's saying where to go as well, but went with the object. After that, taking the characters that might be encountered into the calculation was the matter of question. I chose to use a formula so that characters low on points will be more likely to attack those with many points. This also taught me a solid lesson about memory leaks, when I forgot to delete nodes after using them. and made the nodes given to the player object after seeing how ineffective running the pathfinder with each step would be.
I also worked some general issues, spesifically the setting of repositioning of the goal, and working out how characters deal damage to eachother on collision, a thing I have called knifing. Both of these were functions that came to somewhat easily though.
The main part of my learning experience would actually be focused at github, which demanded much effort, seeing that it does a lot of stuff that I had not encountered. Also dealing with mergeconflicts was a hassle we had to deal with.
I started with creating a class for creating and showing a scoreboard, but did not manage to finish it, most of my issue was focused into making a quicksort for the finished result of an array containing player number and scores, but the effort was mixed with research into how to display the results. It was very informative, but rather fruitless.